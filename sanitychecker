#!/usr/bin/env python3

"""sanitychecker - Perform a number of sanity checks on a directory of assets.

This is the executable portion of the sanitychecker package that can be run
from a terminal with command line arguments.

Example::
    $ sanitychecker ./directory_containing_assets -c ./custom_config.yml

For information on how to write a config file, please refer to the README.

Errors:
    * If your config file is malformed, it will not load.
    * If the assets directory does not exist, the app will not run.
    * If the rules in your config file are malformed, a context won't be created.

Author:
    Sam Gibson <samolivergibson@gmail.com>
"""

import argparse
from os.path import exists

import sanity
import sanity.config

DESCRIPTION = "Perform a number of quick sanity checks on a directory of assets"
"""str: This is the description that gets printed when help text is displayed."""

def exit_app(code, msg=""):
    """Exit the application with an exit code, printing a message."""
    print(msg)
    raise SystemExit(code)

def main():
    """The main method of the app."""
    # first, parse command line arguments
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument("directory", type=str,
                        help="The directory of assets to check.")
    parser.add_argument("-c", "--config", type=str, default="default-config.yml",
                        help="The YAML config file to use for this check. Defaults"
                        " to './default-config.yml'")
    args = parser.parse_args()

    # check to see if specified asset directory exists
    if not exists(args.directory):
        exit_app(1, f"ERROR: Specified assets directory '{args.directory}' did not exist")
    
    # try to load the config file given
    conf = None
    try:
        conf = sanity.config.parse_config(args.config)
    except sanity.config.ConfigError as exc:
        exit_app(1, f"ERROR: Could not load config, {str(exc)}")

    # try to create a sanity checker context
    sanity_ctx = None
    try:
        sanity_ctx = sanity.CheckerContext(conf, args.directory)
    except sanity.ContextCreationError as exc:
        exit_app(1, f"ERROR: Unable to create context, {str(exc)}")

    # finally, perform a sanity check on the specified directory
    sanity.check(sanity_ctx, args.directory)

if __name__ == "__main__":
    main()
